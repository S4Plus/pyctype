from typing import Optional, Tuple, Any, overload, AnyStr


# c
class ImagingCore:
    def getpixel(self, a: Any) -> None: ...
    def putpixel(self, a: Tuple[int, int], b: object) -> None: ...
    def pixel_access(self, a: Optional[int] = ...) -> object: ...
    def color_lut_3d(self, a: str, b: int, c: int, d: int, e: int, f: int, g: object) -> Image: ...
    def convert(self, a: str, b: Optional[int] = ..., c: Optional[object] = ...) -> Image: ...
    def convert2(self, a: object, b: object) -> Image: ...
    @overload
    def convert_matrix(self, a: str, b: Tuple[float, float, float, float]) -> Image: ...
    @overload
    def convert_matrix(self, a: str, b: Tuple[float, float, float, float, float, float, float, float]) -> Image: ...
    @overload
    def convert_transparent(self, a: str, b: int) -> Image: ...
    @overload
    def convert_transparent(self, a: str, b: Tuple[int, int, int]) -> Image: ...
    def copy(self) -> Image: ...
    def crop(self, a: Tuple[int, int, int, int]) -> Image: ...
    def expand(self, a: int, b: int, c: Optional[int] = ...) -> Image: ...
    def filter(self, a: Tuple[int, int], b: float, c: float, d: object) -> Image: ...
    def histogram(self, a: Optional[object] = ..., b: Optional[object] = ...) -> list: ...
    def entropy(self, a: Optional[object] = ..., b: Optional[object] = ...) -> float: ...
    def modefilter(self, a: int) -> Image: ...
    def offset(self, a: int, b: int) -> Image: ...
    def paste(self, a: object, b: Tuple[int, int, int, int], c: Optional[object]) -> None: ...
    def point(self, a: object, b: Optional[str] = ...) -> Image: ...
    def point_transform(self, a: Optional[float] = ..., b: Optional[float] = ...) -> Image: ...
    def putdata(self, a: object, b: Optional[float] = ..., c: Optional[float] = ...) -> None: ...
    def quantize(self, a: Optional[int] = ..., b: Optional[int] = ..., c: Optional[int] = ...) -> Image: ...
    def rankfilter(self, a: int, b: int) -> Image: ...
    def resize(self, a: Tuple[int, int], b: Optional[int] = ..., c: Optional[Tuple[float, float, float, float]] = ...) -> Image: ...
    def reduce(self, a: Tuple[int, int], b: Optional[Tuple[int, int, int, int]] = ...) -> Image: ...
    def transpose(self, a: int) -> Image: ...
    def transform2(self, a: Tuple[int, int, int, int], b: object, c: int, d: object, e: Optional[int] = ..., f: Optional[int] = ...) -> None: ...
    def isblock(self) -> bool: ...
    def getbbox(self) -> Tuple[int, int, int, int]: ...
    def getcolors(self, a: int) -> list: ...
    def getextrema(self) -> object: ...
    def getprojection(self) -> object: ...
    def getband(self, a: int) -> Image: ...
    def putband(self, a: object, b: int) -> None: ...
    def split(self) -> tuple: ...
    def fillband(self, a: int, b: int) -> None: ...
    def setmode(self, a: AnyStr) -> None: ...
    def getpalette(self, a: str, b: str) -> bytes: ...
    def getpalettemode(self) -> str: ...
    def putpalette(self, a: str, b: bytes) -> None: ...
    def putpalettealpha(self, a: int, b: int) -> None: ...
    def putpalettealphas(self, a: bytes) -> None: ...
    def chop_invert(self) -> Image: ...
    def chop_lighter(self, a: object) -> Image: ...
    def chop_darker(self, a: object) -> Image: ...
    def chop_difference(self, a: object) -> Image: ...
    def chop_multiply(self, a: object) -> Image: ...
    def chop_screen(self, a: object) -> Image: ...
    def chop_add(self, a: object, b: Optional[float] = ..., c: Optional[int] = ...) -> Image: ...
    def chop_subtract(self, a: object, b: Optional[float] = ..., c: Optional[int] = ...) -> Image: ...
    def chop_add_modulo(self, a: object) -> Image: ...
    def chop_subtract_modulo(self, a: object) -> Image: ...
    def chop_and(self, a: object) -> Image: ...
    def chop_or(self, a: object) -> Image: ...
    def chop_xor(self, a: object) -> Image: ...
    def chop_soft_light(self, a: object) -> Image: ...
    def chop_hard_light(self, a: object) -> Image: ...
    def chop_overlay(self, a: object) -> Image: ...
    def gaussian_blur(self, a: float, b: Optional[int] = ...) -> Image: ...
    def unsharp_mask(self, a: float, b: int, c: int) -> Image: ...
    def box_blur(self, a: float, b: int) -> Image: ...
    def effect_spread(self, a: int) -> Image: ...
    def new_block(self, a: str, b: Tuple[int, int]) -> Image: ...
    def save_ppm(self, a: str) -> None: ...


class ImageFile(Image):
    def getdata(self) -> ImagingCore: ...


def open(a: AnyStr) -> ImageFile: ...
def frombytes(a: Any, b: Any, c: Any) -> Image: ...
def fromarray(a: Any) -> Image: ...

def alpha_composite(a: str) -> Image: ...
def blend(a: object, b: object, c: Optional[float] = ...) -> Image: ...
def fill(a: str, b: Optional[Tuple[int, int]] = ..., c: object) -> Image: ...
def merge(a: str, b: object, c: Optional[object], d: Optional[object], e: Optional[object]) -> Image: ...
def convert(a: object, b: object) -> None: ...
def getcodecstatus(a: int) -> str: ...
def effect_mandelbrot(a: Optional[Tuple[int, int]] = ..., b: Optional[Tuple[float, float, float, float]] = ..., c: Optional[int] = ...) -> Image: ...
def effect_noise(a: Tuple[int, int], b: Optional[float] = ...) -> Image: ...
def linear_gradient(a: str) -> Image: ...
def radial_gradient(a: str) -> Image: ...
def wedge(a: str) -> Image: ...
def font(a: object, b: bytes) -> object: ...
def draw(a: object, b: Optional[int]) -> object: ...
def get_stats() -> dict: ...
def reset_stats() -> None: ...
def get_alignment() -> int: ...
def get_block_size() -> int: ...
def get_blocks_max() -> int: ...
def set_alignment(a: int) -> None: ...
def set_block_size(a: int) -> None: ...
def set_blocks_max(a: int) -> None: ...
def clear_cache(a: Optional[int]) -> None: ...


class Image(ImagingCore):
    def save(self, a: Any, format: Optional[Any] = ...) -> None: ...
    def show(self) -> None: ...

    def new(self, b: str, c: Tuple[int, int]) -> Image: ...